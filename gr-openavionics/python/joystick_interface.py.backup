#!/usr/bin/env python
# 
# Copyright 2013 <+YOU OR YOUR COMPANY+>.
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

import numpy
from gnuradio import gr
try: import pmt
except: from gruel import pmt
from math import pi
from gruel import pmt
import serial
import thread
import pygame



# Define some colors
BLACK    = (   0,   0,   0)
WHITE    = ( 255, 255, 255)

# This is a simple class that will help us print to the screen
# It has nothing to do with the joysticks, just outputing the
# information.
class TextPrint:
    def __init__(self):
        self.reset()
        self.font = pygame.font.Font(None, 20)

    def prints(self, screen, textString):
        textBitmap = self.font.render(textString, True, BLACK)
        screen.blit(textBitmap, [self.x, self.y])
        self.y += self.line_height
        
    def reset(self):
        self.x = 10
        self.y = 10
        self.line_height = 15
        
    def indent(self):
        self.x += 10
        
    def unindent(self):
        self.x -= 10

class joystick_interface(gr.sync_block):
    """
    docstring for block joystick_interface
    """
    def __init__(self):
        gr.sync_block.__init__(self,
            name="joystick_interface",
            in_sig=None,
            out_sig=None)

        self.message_port_register_out(pmt.pmt_intern('out'))
        thread.start_new_thread( self.tx_work, (1, ))

        pygame.init()

    def tx_work(self,x):
         
        # Set the width and height of the screen [width,height]
        size = [500, 400]
        screen = pygame.display.set_mode(size)

        pygame.display.set_caption("My Game")

        #Loop until the user clicks the close button.
        done = False

        # Used to manage how fast the screen updates
        clock = pygame.time.Clock()

        # Initialize the joysticks
        pygame.joystick.init()
            
        # Get ready to print
        textPrint = TextPrint()

        # -------- Main Program Loop -----------
        while done==False:
            # EVENT PROCESSING STEP
            for event in pygame.event.get(): # User did something
                if event.type == pygame.QUIT: # If user clicked close
                    done=True # Flag that we are done so we exit this loop
                
                # Possible joystick actions: JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION
                if event.type == pygame.JOYBUTTONDOWN:
                    a = 0
                    #print("Joystick button pressed.")
                if event.type == pygame.JOYBUTTONUP:
                    a = 0
                    #print("Joystick button released.")
                    
            # DRAWING STEP
            # First, clear the screen to white. Don't put other drawing commands
            # above this, or they will be erased with this command.
            screen.fill(WHITE)
            textPrint.reset()

            # Get count of joysticks
            joystick_count = pygame.joystick.get_count()

            textPrint.prints(screen, "Number of joysticks: {}".format(joystick_count) )
            textPrint.indent()
            
            # For each joystick:
            for i in range(joystick_count):
                joystick = pygame.joystick.Joystick(i)
                joystick.init()
            
                textPrint.prints(screen, "Joystick {}".format(i) )
                textPrint.indent()
            
                # Get the name from the OS for the controller/joystick
                name = joystick.get_name()
                textPrint.prints(screen, "Joystick name: {}".format(name) )
                
                # Usually axis run in pairs, up/down for one, and left/right for
                # the other.
                axes = joystick.get_numaxes()
                axis = [None] * axes
                textPrint.prints(screen, "Number of axes: {}".format(axes) )
                textPrint.indent()
                for i in range( axes ):
                    axis[i] = joystick.get_axis( i )
                    textPrint.prints(screen, "Axis {} value: {:>6.3f}".format(i, axis[i]) )
                textPrint.unindent()
                    
                buttons = joystick.get_numbuttons()
                button = [None] * buttons
                textPrint.prints(screen, "Number of buttons: {}".format(buttons) )
                textPrint.indent()

                for i in range( buttons ):
                    button[i] = joystick.get_button( i )
                    textPrint.prints(screen, "Button {:>2} value: {}".format(i,button[i]) )
                textPrint.unindent()
                    
                # Hat switch. All or nothing for direction, not like joysticks.
                # Value comes back in an array.
                hats = joystick.get_numhats()
                hat = [None] * hats
                textPrint.prints(screen, "Number of hats: {}".format(hats) )
                textPrint.indent()

                for i in range( hats ):
                    hat[i] = joystick.get_hat( i )
                    textPrint.prints(screen, "Hat {} value: {}".format(i, str(hat[i])) )
                textPrint.unindent()
                
                textPrint.unindent()

                dict2 = { "id" : "joystick",
                        "hat" : hat,
                        "axes" : axis,
                        "buttons" : button}
                
                pmt_dict = pmt.to_pmt(dict2)
                self.message_port_pub(pmt.pmt_intern('out'),pmt.to_pmt(pmt_dict))
            
            # ALL CODE TO DRAW SHOULD GO ABOVE THIS COMMENT
            
            # Go ahead and update the screen with what we've drawn.
            pygame.display.flip()

            # Limit to 20 frames per second
            clock.tick(20)
            
        # Close the window and quit.
        # If you forget this line, the program will 'hang'
        # on exit if running from IDLE.
        pygame.quit ()
